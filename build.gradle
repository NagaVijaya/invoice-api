plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'org.barfuin.gradle.jacocolog' version '1.0.1'
}

group = 'com.galvanize.orion'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	compile 'org.springdoc:springdoc-openapi-ui:1.5.2'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/galvanize/orion/invoicify/entities/**',
					'com/galvanize/orion/invoicify/repository/**',
					'com/galvanize/orion/invoicify/dto/**',
					'com/galvanize/orion/invoicify/utilities/Constants.*',
					'com/galvanize/orion/invoicify/InvoicifyApplication.*'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			excludes = [
					'com.galvanize.orion.invoicify.entities.*',
					'com.galvanize.orion.invoicify.repository.*',
					'com.galvanize.orion.invoicify.dto.*',
					'com.galvanize.orion.invoicify.utilities.Constants',
					'com.galvanize.orion.invoicify.InvoicifyApplication',
			]
			limit {
				counter = 'LINE'
				minimum = 0.9
			}
		}
	}
}
